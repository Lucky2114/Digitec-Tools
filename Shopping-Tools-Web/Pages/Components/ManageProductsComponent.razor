@inject IModalService Modal
@using Microsoft.AspNetCore.Components
@using Shopping_Tools_Api_Services.Models
@using Shopping_Tools_Api_Services.Core.Digitec
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Storage StorageInjected
@inject AppState AppState
@inject IMatToaster Toaster

<div class="container">
    @if (_products?.Count > 0)
    {
        <MatTable Items="@_products" class="mat-elevation-z5">
            <MatTableHeader>
                <th>
                    <div>Product Id</div>
                </th>
                <th>
                    <div>Product Name</div>
                </th>
                <th>
                    <div>Product Link</div>
                </th>
                <th>
                    <div>Delete</div>
                </th>
            </MatTableHeader>
            <MatTableRow>
                <td>@context.ProductIdSimple</td>
                <td style="width: 40% !important;">
                    <strong>@context.Brand</strong> @context.Name
                </td>
                <td style="width: 100% !important;">
                    <a href="@context.Url">@context.Name</a>
                </td>
                <td>
                    <div class="align-content-center">
                        <MatButton Icon="delete" Raised="true" OnClick="@(e => RemoveProduct(context))">
                            Delete
                        </MatButton>
                    </div>
                </td>
            </MatTableRow>
        </MatTable>
    }
    else
    {
        <div class="align-content-center justify-content-center text-center">
            <br />
            <br />
            <h2>No Data Available</h2>
        </div>
    }
    <br />
    <MatButton OnClick="@ShowModal" Raised="true">Add New Product</MatButton>
</div>

@code {

    [Parameter]
    public IApi Shop { get; set; }

    private List<Product> _products = new List<Product>();

    protected override async Task OnParametersSetAsync()
    {
        await UpdateProductsTable();
    }

    private async Task UpdateProductsTable()
    {
        AppState.SetAppLoading(true);
        this.StateHasChanged();
        _products = await StorageInjected.GetProductsForUser(AuthenticationStateProvider, Shop);
        AppState.SetAppLoading(false);
        this.StateHasChanged();
    }

    private async Task RemoveProduct(Product product)
    {
        await StorageInjected.RemoveUserFromProduct(product, AuthenticationStateProvider);
        await UpdateProductsTable();
    }

    private void ShowModal()
    {
        Modal.OnClose += ModalClosed;
        var modalParams = new ModalParameters();
        modalParams.Add("OnlineShop", Shop);

        Modal.Show<RegisterProductComponent>("Register A New Product", modalParams);
    }

    private async void ModalClosed(ModalResult modalResult)
    {
        if (modalResult.Data == null) return;

        Toaster.Configuration.ShowProgressBar = true;
        Toaster.Configuration.ShowCloseButton = true;

        var modalResultData = (RegisterProductResult)modalResult.Data;

        switch (modalResultData)
        {
            case RegisterProductResult.Ok:
                await UpdateProductsTable();
                StateHasChanged();
                Toaster.Add("Product Successfully Registered!", MatToastType.Success);
                return;
            case RegisterProductResult.InvalidUrl:
                Toaster.Add("This is an invalid URL. Make sure it's for the correct shop.", MatToastType.Danger);
                StateHasChanged();
                break;
            case RegisterProductResult.InternalError:
                Toaster.Add("An internal server error has occured. This is not good.", MatToastType.Danger);
                break;
        }
    }

}