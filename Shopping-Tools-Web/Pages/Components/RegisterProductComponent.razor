@using System.Reflection.Metadata.Ecma335
@using Shopping_Tools_Api_Services.Core.Digitec
@using Shopping_Tools_Web.Data
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IModalService ModalService
@inject Storage StorageInjected

<AuthorizeView Context="authContext">
    <Authorized>
        <div class="container align-content-center text-center justify-content-center">
            <EditForm Model="@_registerProductModel" OnValidSubmit="@OnValidSubmit" Context="formContext">
                <DataAnnotationsValidator/>
                <ValidationSummary/>

                <p>
                    <MatTextField Label="Product Url" @bind-Value="_registerProductModel.ProductUrl"/>
                </p>

                <br/>
                <MatButton Disabled="@_loading" Type="submit" Raised="true">Add</MatButton>
            </EditForm>
            @if (_loading)
            {
                <MatProgressBar Indeterminate="true"></MatProgressBar>
            }
        </div>
    </Authorized>

    <NotAuthorized>
        <NotAuthorizedComponent/>
    </NotAuthorized>
</AuthorizeView>


@code
{
    [CascadingParameter]
    ModalParameters Parameters { get; set; }

    private RegisterProductModel _registerProductModel;

    private bool _loading = false;

    private async Task OnValidSubmit()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        //update button state
        _loading = true;

        var result = await Tools.RegisterNewProduct(_registerProductModel.ProductUrl, user.Identity.Name, AuthenticationStateProvider, StorageInjected, Parameters.Get<IApi>("OnlineShop"));
        _loading = false;

        ModalService.Close(ModalResult.Ok(result));
    }

    protected override void OnInitialized()
    {
        _registerProductModel = new RegisterProductModel();
        base.OnInitialized();
    }

}